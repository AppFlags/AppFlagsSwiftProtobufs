// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: api.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public struct Appflags_GetFlagRequest {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var configurationID: String {
    get {return _configurationID ?? String()}
    set {_configurationID = newValue}
  }
  /// Returns true if `configurationID` has been explicitly set.
  public var hasConfigurationID: Bool {return self._configurationID != nil}
  /// Clears the value of `configurationID`. Subsequent reads from it will return its default value.
  public mutating func clearConfigurationID() {self._configurationID = nil}

  public var getUpdateAt: Int64 {
    get {return _getUpdateAt ?? 0}
    set {_getUpdateAt = newValue}
  }
  /// Returns true if `getUpdateAt` has been explicitly set.
  public var hasGetUpdateAt: Bool {return self._getUpdateAt != nil}
  /// Clears the value of `getUpdateAt`. Subsequent reads from it will return its default value.
  public mutating func clearGetUpdateAt() {self._getUpdateAt = nil}

  public var user: Appflags_User {
    get {return _user ?? Appflags_User()}
    set {_user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  public var hasUser: Bool {return self._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  public mutating func clearUser() {self._user = nil}

  public var platformData: Appflags_PlatformData {
    get {return _platformData ?? Appflags_PlatformData()}
    set {_platformData = newValue}
  }
  /// Returns true if `platformData` has been explicitly set.
  public var hasPlatformData: Bool {return self._platformData != nil}
  /// Clears the value of `platformData`. Subsequent reads from it will return its default value.
  public mutating func clearPlatformData() {self._platformData = nil}

  public var loadType: Appflags_ConfigurationLoadType {
    get {return _loadType ?? .initialLoad}
    set {_loadType = newValue}
  }
  /// Returns true if `loadType` has been explicitly set.
  public var hasLoadType: Bool {return self._loadType != nil}
  /// Clears the value of `loadType`. Subsequent reads from it will return its default value.
  public mutating func clearLoadType() {self._loadType = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _configurationID: String? = nil
  fileprivate var _getUpdateAt: Int64? = nil
  fileprivate var _user: Appflags_User? = nil
  fileprivate var _platformData: Appflags_PlatformData? = nil
  fileprivate var _loadType: Appflags_ConfigurationLoadType? = nil
}

public struct Appflags_GetFlagsResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var flags: [Appflags_ComputedFlag] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

#if swift(>=5.5) && canImport(_Concurrency)
extension Appflags_GetFlagRequest: @unchecked Sendable {}
extension Appflags_GetFlagsResponse: @unchecked Sendable {}
#endif  // swift(>=5.5) && canImport(_Concurrency)

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "appflags"

extension Appflags_GetFlagRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetFlagRequest"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "configurationId"),
    2: .same(proto: "getUpdateAt"),
    3: .same(proto: "user"),
    4: .same(proto: "platformData"),
    5: .same(proto: "loadType"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._configurationID) }()
      case 2: try { try decoder.decodeSingularInt64Field(value: &self._getUpdateAt) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._user) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._platformData) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self._loadType) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._configurationID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._getUpdateAt {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._user {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._platformData {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._loadType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appflags_GetFlagRequest, rhs: Appflags_GetFlagRequest) -> Bool {
    if lhs._configurationID != rhs._configurationID {return false}
    if lhs._getUpdateAt != rhs._getUpdateAt {return false}
    if lhs._user != rhs._user {return false}
    if lhs._platformData != rhs._platformData {return false}
    if lhs._loadType != rhs._loadType {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Appflags_GetFlagsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GetFlagsResponse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "flags"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.flags) }()
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.flags.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.flags, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Appflags_GetFlagsResponse, rhs: Appflags_GetFlagsResponse) -> Bool {
    if lhs.flags != rhs.flags {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
